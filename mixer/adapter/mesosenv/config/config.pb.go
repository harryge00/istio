// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/mesosenv/config/config.proto

/*
	Package config is a generated protocol buffer package.

	The `mesosenv` adapter extracts information from a mesos environment
	and produces attribtes that can be used in downstream adapters.

	This adapter supports the [mesosenv template].

	It is generated from these files:
		mixer/adapter/mesosenv/config/config.proto

	It has these top-level messages:
		Params
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration parameters for the mesos adapter. These params
// control the manner in which the mesos adapter discovers and
// generates values related to mesos task and pod information.
//
// The adapter works by looking up pod information by UIDs (of the
// form: "mesos://pod.namespace"). It expects that the UIDs will be
// supplied in an input map for three distinct traffic classes (source,
// destination, and origin).
//
// For all valid UIDs supplied, this adapter generates output
// values containing information about the related pods.
type Params struct {
	// Marathon API address
	// Default: "http://master.mesos:8080"
	MarathonAddress string `protobuf:"bytes,1,opt,name=marathon_address,json=marathonAddress,proto3" json:"marathon_address,omitempty"`
	// HTTPBasicAuthUser for the Marathon
	HttpBasicAuthUser string `protobuf:"bytes,2,opt,name=http_basic_auth_user,json=httpBasicAuthUser,proto3" json:"http_basic_auth_user,omitempty"`
	// HTTPBasicPassword for the Marathon
	HttpBasicAuthPassword string `protobuf:"bytes,3,opt,name=http_basic_auth_password,json=httpBasicAuthPassword,proto3" json:"http_basic_auth_password,omitempty"`
	// Controls the resync period of the mesos cluster info cache.
	// The cache will watch for events and every so often completely resync.
	// This controls how frequently the complete resync occurs.
	//
	// Default: 5 minutes
	CacheRefreshDuration time.Duration `protobuf:"bytes,4,opt,name=cache_refresh_duration,json=cacheRefreshDuration,stdduration" json:"cache_refresh_duration"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func init() {
	proto.RegisterType((*Params)(nil), "adapter.mesosenv.config.Params")
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MarathonAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.MarathonAddress)))
		i += copy(dAtA[i:], m.MarathonAddress)
	}
	if len(m.HttpBasicAuthUser) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.HttpBasicAuthUser)))
		i += copy(dAtA[i:], m.HttpBasicAuthUser)
	}
	if len(m.HttpBasicAuthPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.HttpBasicAuthPassword)))
		i += copy(dAtA[i:], m.HttpBasicAuthPassword)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintConfig(dAtA, i, uint64(types.SizeOfStdDuration(m.CacheRefreshDuration)))
	n1, err := types.StdDurationMarshalTo(m.CacheRefreshDuration, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.MarathonAddress)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.HttpBasicAuthUser)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.HttpBasicAuthPassword)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = types.SizeOfStdDuration(m.CacheRefreshDuration)
	n += 1 + l + sovConfig(uint64(l))
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`MarathonAddress:` + fmt.Sprintf("%v", this.MarathonAddress) + `,`,
		`HttpBasicAuthUser:` + fmt.Sprintf("%v", this.HttpBasicAuthUser) + `,`,
		`HttpBasicAuthPassword:` + fmt.Sprintf("%v", this.HttpBasicAuthPassword) + `,`,
		`CacheRefreshDuration:` + strings.Replace(strings.Replace(this.CacheRefreshDuration.String(), "Duration", "google_protobuf1.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarathonAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarathonAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpBasicAuthUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpBasicAuthUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpBasicAuthPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpBasicAuthPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRefreshDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.CacheRefreshDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/adapter/mesosenv/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xed, 0x7b, 0x51, 0x05, 0x61, 0x00, 0xa2, 0x02, 0xa1, 0xc3, 0x69, 0xc5, 0x54, 0x18,
	0x62, 0x09, 0x06, 0x58, 0x5b, 0xf1, 0x00, 0x55, 0x25, 0x06, 0x58, 0x22, 0x37, 0x71, 0x93, 0x48,
	0x24, 0x8e, 0x6c, 0x07, 0x18, 0x79, 0x04, 0x46, 0x1e, 0x81, 0x47, 0xe9, 0xd8, 0x91, 0x09, 0x88,
	0x59, 0x18, 0x3b, 0x32, 0xa2, 0xd8, 0x09, 0x12, 0x4c, 0xb6, 0xcf, 0xf7, 0xfd, 0xc7, 0x3e, 0x76,
	0x8e, 0xb3, 0xf4, 0x9e, 0x09, 0x42, 0x23, 0x5a, 0x28, 0x26, 0x48, 0xc6, 0x24, 0x97, 0x2c, 0xbf,
	0x25, 0x21, 0xcf, 0xe7, 0x69, 0xdc, 0x2c, 0x7e, 0x21, 0xb8, 0xe2, 0xee, 0x7e, 0x63, 0xf9, 0xad,
	0xe5, 0x5b, 0xdc, 0xeb, 0xc6, 0x3c, 0xe6, 0xc6, 0x21, 0xf5, 0xce, 0xea, 0x3d, 0x88, 0x39, 0x8f,
	0x6f, 0x18, 0x31, 0xa7, 0x59, 0x39, 0x27, 0x51, 0x29, 0xa8, 0x4a, 0x79, 0x6e, 0xf9, 0xe1, 0x17,
	0x76, 0x3a, 0x13, 0x2a, 0x68, 0x26, 0xdd, 0x23, 0x67, 0x3b, 0xa3, 0x82, 0xaa, 0x84, 0xe7, 0x01,
	0x8d, 0x22, 0xc1, 0xa4, 0xf4, 0xf0, 0x00, 0x0f, 0x37, 0xa6, 0x5b, 0x6d, 0x7d, 0x64, 0xcb, 0x2e,
	0x71, 0xba, 0x89, 0x52, 0x45, 0x30, 0xa3, 0x32, 0x0d, 0x03, 0x5a, 0xaa, 0x24, 0x28, 0x25, 0x13,
	0xde, 0x3f, 0xa3, 0xef, 0xd4, 0x6c, 0x5c, 0xa3, 0x51, 0xa9, 0x92, 0x4b, 0xc9, 0x84, 0x7b, 0xe6,
	0x78, 0x7f, 0x03, 0x05, 0x95, 0xf2, 0x8e, 0x8b, 0xc8, 0xfb, 0x6f, 0x42, 0xbb, 0xbf, 0x42, 0x93,
	0x06, 0xba, 0x57, 0xce, 0x5e, 0x48, 0xc3, 0x84, 0x05, 0x82, 0xcd, 0x05, 0x93, 0x49, 0xd0, 0xbe,
	0xdf, 0x5b, 0x1b, 0xe0, 0xe1, 0xe6, 0xc9, 0x81, 0x6f, 0x07, 0xf4, 0xdb, 0x01, 0xfd, 0x8b, 0x46,
	0x18, 0xaf, 0x2f, 0x5e, 0xfb, 0xe8, 0xe9, 0xad, 0x8f, 0xa7, 0x5d, 0xd3, 0x62, 0x6a, 0x3b, 0xfc,
	0xf0, 0xf3, 0x45, 0x05, 0x68, 0x59, 0x01, 0x7a, 0xa9, 0x00, 0xad, 0x2a, 0x40, 0x0f, 0x1a, 0xf0,
	0xb3, 0x06, 0xb4, 0xd0, 0x80, 0x97, 0x1a, 0xf0, 0xbb, 0x06, 0xfc, 0xa9, 0x01, 0xad, 0x34, 0xe0,
	0xc7, 0x0f, 0x40, 0xd7, 0x1d, 0xfb, 0xd5, 0xb3, 0x8e, 0xb9, 0xec, 0xf4, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x51, 0x84, 0xc6, 0x31, 0xb8, 0x01, 0x00, 0x00,
}
